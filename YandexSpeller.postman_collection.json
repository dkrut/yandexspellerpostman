{
	"info": {
		"_postman_id": "e1f64a8c-5978-4997-a96a-28c25780a4ca",
		"name": "YandexSpeller",
		"description": "https://yandex.ru/dev/speller/\r\n\r\nСервис проверки правописания Яндекс.Спеллер (коротко Спеллер) предлагает разработчикам использовать возможность интерактивной проверки орфографии на страницах своих сайтов.\r\n\r\nСпеллер анализирует слова, основываясь на правилах орфографии и лексике современного языка, а также использует технологии машинного обучения.\r\n\r\nСервис в настоящее время поддерживает три языка:\r\n- русский;\r\n- украинский;\r\n- английский.\r\n\r\nЯндекс.Спеллер является HTTP-службой и предоставляет API для обработки клиентских запросов на проверку орфографии. Яндекс.Спеллер поддерживает HTTP(S) GET- и POST-запросы и работает в кодировке UTF-8.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "JSON",
			"item": [
				{
					"name": "checkText",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [
										{
											"name": "CorrectText_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextPart1}} {{testTextPart2}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}} {{testTextPart2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "RepeatText_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testRepeatText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CapitalizationError_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_CAPITALIZATION\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"питер\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"Питер\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWIthDigits_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"цифр123ами\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextDigits}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtml_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"4\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"tests['Error words'] = (jsonData[0].word === \"DOCTYPE\") && (jsonData[1].word === \"lang\") && (jsonData[2].word === \"ru\") && (jsonData[3].word === \"meta\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testHtml}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextSeveralRows_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextSeveralRows}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextSeveralRows}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsTextSeveralRows_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error line numbers'] = (jsonData[0].row === 0) && (jsonData[1].row === 1) && (jsonData[2].row === 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testErrorTextSeveralRows}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testErrorTextSeveralRows}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OneErrorText_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1133ecea-1286-482e-9c4d-be26fa91f7b3",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ac5cf5c-a877-4ba7-9982-27e6d13c532d",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error position'] = (jsonData[0].pos === 15);",
															"tests['Error line number'] = (jsonData[0].row === 0);",
															"tests['Error column number'] = (jsonData[0].col === 15);",
															"tests['Error word length'] = (jsonData[0].len === 6);",
															"tests['Error word'] = (jsonData[0].word === \"мяхких\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"мягких\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextWithOneError}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithOneError}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsText_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b418a32-1e47-44a2-9278-5d85f20ec90f",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b71d3fd3-9b69-4faf-a994-77da824b08e4",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error position'] = (jsonData[0].pos === 3);",
															"tests['Error line number'] = (jsonData[0].row === 0);",
															"tests['Error column number'] = (jsonData[0].col === 3);",
															"tests['Error word length'] = (jsonData[0].len === 5);",
															"tests['Error word'] = (jsonData[0].word === \"выпий\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"выпей\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextWithFewErrors}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithFewErrors}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithUrl_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"ww\");",
															"tests['Error word'] = (jsonData[1].word === \"yandx\");",
															"tests['Error word'] = (jsonData[2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextUrl}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithEmail_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"emil\");",
															"tests['Error word'] = (jsonData[1].word === \"yandx\");",
															"tests['Error word'] = (jsonData[2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextEmail}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62157841-cba7-4fff-91c5-c87c5eeada5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d527338-3aaf-4781-a52a-85073b411a84",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "WithOptionalParams",
									"item": [
										{
											"name": "CorrectHtmlFormatHtml_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testHtml}}&{{paramFormat}}={{formatHTML}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatHTML}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtmlFormatPlain_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"4\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testHtml}}&{{paramFormat}}={{formatPlain}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatPlain}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextFormatPlain_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextPart1}}&{{paramFormat}}={{formatPlain}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}}"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatPlain}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}&{{paramOptions}}={{option_IGNORE_CAPITALIZATION}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_CAPITALIZATION}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreDigits_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextDigits}}&{{paramOptions}}={{option_IGNORE_DIGITS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_DIGITS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreUrls_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextUrl}}+{{testTextEmail}}&{{paramOptions}}={{option_IGNORE_URLS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}+{{testTextEmail}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_URLS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testRepeatText}}&{{paramOptions}}={{option_FIND_REPEAT_WORDS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_FIND_REPEAT_WORDS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}+{{testTextDigits}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}+{{testTextDigits}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords&IgnoreUrls_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits&FindRepeatWords&IgnoreUrls_JCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\")) + parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}+{{testTextDigits}}+{{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}+{{testTextDigits}}+{{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b887cd6-a64a-4c2d-b70b-a39ad5393185",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50bc24ae-0372-4bca-83e6-977997ec7625",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [
										{
											"name": "CorrectText_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}} {{testTextPart2}}"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RepeatText_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapitalizationError_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_CAPITALIZATION\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"питер\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"Питер\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWIthDigits_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"цифр123ами\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtml_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"4\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"tests['Error words'] = (jsonData[0].word === \"DOCTYPE\") && (jsonData[1].word === \"lang\") && (jsonData[2].word === \"ru\") && (jsonData[3].word === \"meta\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextSeveralRows_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextSeveralRows}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsTextSeveralRows_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error line numbers'] = (jsonData[0].row === 0) && (jsonData[1].row === 1) && (jsonData[2].row === 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testErrorTextSeveralRows}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OneErrorText_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1133ecea-1286-482e-9c4d-be26fa91f7b3",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ac5cf5c-a877-4ba7-9982-27e6d13c532d",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error position'] = (jsonData[0].pos === 15);",
															"tests['Error line number'] = (jsonData[0].row === 0);",
															"tests['Error column number'] = (jsonData[0].col === 15);",
															"tests['Error word length'] = (jsonData[0].len === 6);",
															"tests['Error word'] = (jsonData[0].word === \"мяхких\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"мягких\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithOneError}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsText_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b418a32-1e47-44a2-9278-5d85f20ec90f",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b71d3fd3-9b69-4faf-a994-77da824b08e4",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error position'] = (jsonData[0].pos === 3);",
															"tests['Error line number'] = (jsonData[0].row === 0);",
															"tests['Error column number'] = (jsonData[0].col === 3);",
															"tests['Error word length'] = (jsonData[0].len === 5);",
															"tests['Error word'] = (jsonData[0].word === \"выпий\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"выпей\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithFewErrors}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithUrl_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"ww\");",
															"tests['Error word'] = (jsonData[1].word === \"yandx\");",
															"tests['Error word'] = (jsonData[2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithEmail_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"emil\");",
															"tests['Error word'] = (jsonData[1].word === \"yandx\");",
															"tests['Error word'] = (jsonData[2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62157841-cba7-4fff-91c5-c87c5eeada5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d527338-3aaf-4781-a52a-85073b411a84",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "WithOptionalParams",
									"item": [
										{
											"name": "CorrectHtmlFormatHtml_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatHTML}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtmlFormatPlain_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"4\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatPlain}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextFormatPlain_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}}",
															"type": "text"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatPlain}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_CAPITALIZATION}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreDigits_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_DIGITS}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreUrls_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}+{{testTextEmail}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_URLS}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_FIND_REPEAT_WORDS}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}+{{testTextDigits}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords&IgnoreUrls_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits&FindRepeatWords&IgnoreUrls Copy_JCTP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\")) + parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}+{{testTextDigits}}+{{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b887cd6-a64a-4c2d-b70b-a39ad5393185",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50bc24ae-0372-4bca-83e6-977997ec7625",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f044365-964f-47ae-b697-856d92af1f68",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"jsonDataLength\", \"0\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b63c9bb0-6585-4b7b-b6a7-abf61cc49bcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "checkTexts",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [
										{
											"name": "CorrectText_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextPart1}}&{{paramText}}={{testTextPart2}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "RepeatText_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testRepeatText}}&{{paramText}}={{testRepeatText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CapitalizationError_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_CAPITALIZATION\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error word'] = (jsonData[0][0].word === \"питер\") && (jsonData[1][0].word === \"питер\");",
															"tests['Speller result'] = pm.expect(jsonData[0][0].s).to.include(\"Питер\") && pm.expect(jsonData[1][0].s).to.include(\"Питер\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextCapitalization}}&{{paramText}}={{testTextCapitalization}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWIthDigits_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error word'] = (jsonData[0][0].word === \"цифр123ами\") && (jsonData[0][0].word === \"цифр123ами\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextDigits}}&{{paramText}}={{testTextDigits}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtml_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"tests['Error words'] = (jsonData[0][0].word === \"DOCTYPE\") && (jsonData[0][1].word === \"lang\") && (jsonData[0][2].word === \"ru\") && (jsonData[0][3].word === \"meta\")",
															"&& (jsonData[1][0].word === \"DOCTYPE\") && (jsonData[1][1].word === \"lang\") && (jsonData[1][2].word === \"ru\") && (jsonData[1][3].word === \"meta\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testHtml}}&{{paramText}}={{testHtml}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextSeveralRows_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextSeveralRows}}&{{paramText}}={{testTextSeveralRows}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextSeveralRows}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextSeveralRows}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsTextSeveralRows_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[0][1].code === errorCode) && (jsonData[0][2].code === errorCode)",
															"&& (jsonData[1][0].code === errorCode) && (jsonData[1][1].code === errorCode) && (jsonData[1][2].code === errorCode);",
															"tests['Error line numbers'] = (jsonData[0][0].row === 0) && (jsonData[0][1].row === 1) && (jsonData[0][2].row === 2)",
															"&& (jsonData[1][0].row === 0) && (jsonData[1][1].row === 1) && (jsonData[1][2].row === 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testErrorTextSeveralRows}}&{{paramText}}={{testErrorTextSeveralRows}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testErrorTextSeveralRows}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testErrorTextSeveralRows}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OneErrorText_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1133ecea-1286-482e-9c4d-be26fa91f7b3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ac5cf5c-a877-4ba7-9982-27e6d13c532d",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error position'] = (jsonData[0][0].pos === 15) && (jsonData[1][0].pos === 15);",
															"tests['Error line number'] = (jsonData[0][0].row === 0) && (jsonData[1][0].row === 0);",
															"tests['Error column number'] = (jsonData[0][0].col === 15) && (jsonData[1][0].col === 15);",
															"tests['Error word length'] = (jsonData[0][0].len === 6) && (jsonData[1][0].len === 6);",
															"tests['Error word'] = (jsonData[0][0].word === \"мяхких\") && (jsonData[1][0].word === \"мяхких\");",
															"tests['Speller result'] = pm.expect(jsonData[0][0].s).to.include(\"мягких\") && pm.expect(jsonData[1][0].s).to.include(\"мягких\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextWithOneError}}&{{paramText}}={{testTextWithOneError}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithOneError}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithOneError}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsText_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b418a32-1e47-44a2-9278-5d85f20ec90f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b71d3fd3-9b69-4faf-a994-77da824b08e4",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error position'] = (jsonData[0][0].pos === 3) && (jsonData[1][0].pos === 3);",
															"tests['Error line number'] = (jsonData[0][0].row === 0) && (jsonData[1][0].row === 0);",
															"tests['Error column number'] = (jsonData[0][0].col === 3) && (jsonData[1][0].col === 3);",
															"tests['Error word length'] = (jsonData[0][0].len === 5) && (jsonData[1][0].len === 5);",
															"tests['Error word'] = (jsonData[0][0].word === \"выпий\") && (jsonData[1][0].word === \"выпий\");",
															"tests['Speller result'] = pm.expect(jsonData[0][0].s).to.include(\"выпей\") && pm.expect(jsonData[1][0].s).to.include(\"выпей\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextWithFewErrors}}&{{paramText}}={{testTextWithFewErrors}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithFewErrors}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithFewErrors}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithUrl&Email_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[0][1].code === errorCode) && (jsonData[0][2].code === errorCode) ",
															"&& (jsonData[1][0].code === errorCode) && (jsonData[1][1].code === errorCode) && (jsonData[1][2].code === errorCode);",
															"",
															"tests['Error words'] = (jsonData[0][0].word === \"ww\") && (jsonData[0][1].word === \"yandx\") && (jsonData[0][2].word === \"ru\")",
															"&& (jsonData[1][0].word === \"emil\") && (jsonData[1][1].word === \"yndex\") && (jsonData[1][2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextUrl}}&{{paramText}}={{testTextEmail}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62157841-cba7-4fff-91c5-c87c5eeada5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d527338-3aaf-4781-a52a-85073b411a84",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "WithOptionalParams",
									"item": [
										{
											"name": "CorrectHtmlFormatHtml_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testHtml}}&{{paramText}}={{testHtml}}&{{paramFormat}}={{formatHTML}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatHTML}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtmlFormatPlain_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"tests['Error words'] = (jsonData[0][0].word === \"DOCTYPE\") && (jsonData[0][1].word === \"lang\") && (jsonData[0][2].word === \"ru\") && (jsonData[0][3].word === \"meta\")",
															"&& (jsonData[1][0].word === \"DOCTYPE\") && (jsonData[1][1].word === \"lang\") && (jsonData[1][2].word === \"ru\") && (jsonData[1][3].word === \"meta\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testHtml}}&{{paramText}}={{testHtml}}&{{paramFormat}}={{formatPlain}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatPlain}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextFormatPlain_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextPart1}}&{{paramText}}={{testTextPart2}}&{{paramFormat}}={{formatPlain}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart2}}"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatPlain}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextCapitalization}}&{{paramText}}={{testTextCapitalization}}&{{paramOptions}}={{option_IGNORE_CAPITALIZATION}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_CAPITALIZATION}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreDigits_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextDigits}}&{{paramText}}={{testTextDigits}}&{{paramOptions}}={{option_IGNORE_DIGITS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_DIGITS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreUrls_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextUrl}}&{{paramText}}={{testTextEmail}}&{{paramOptions}}={{option_IGNORE_URLS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_URLS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error word'] = (jsonData[0][0].word === \"повтора\") && (jsonData[1][0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0][0].s).to.eql([]) && pm.expect(jsonData[1][0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testRepeatText}}&{{paramText}}={{testRepeatText}}&{{paramOptions}}={{option_FIND_REPEAT_WORDS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_FIND_REPEAT_WORDS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextCapitalization}}&{{paramText}}={{testTextDigits}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords&IgnoreUrls_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[1][0].code === errorCode);",
															"tests['Error word'] = (jsonData[1][0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[1][0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextEmail}}&{{paramText}}={{testRepeatText}}&{{paramText}}={{testTextUrl}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits&FindRepeatWords&IgnoreUrls_JCTsG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"5\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\")) + parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[2][0].code === errorCode);",
															"tests['Error word'] = (jsonData[2][0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[2][0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}?{{paramText}}={{testTextCapitalization}}&{{paramText}}={{testTextDigits}}&{{paramText}}={{testRepeatText}}&{{paramText}}={{testTextEmail}}&{{paramText}}={{testTextUrl}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b887cd6-a64a-4c2d-b70b-a39ad5393185",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50bc24ae-0372-4bca-83e6-977997ec7625",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [
										{
											"name": "CorrectText_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart2}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RepeatText_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapitalizationError_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_CAPITALIZATION\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error word'] = (jsonData[0][0].word === \"питер\") && (jsonData[1][0].word === \"питер\");",
															"tests['Speller result'] = pm.expect(jsonData[0][0].s).to.include(\"Питер\") && pm.expect(jsonData[1][0].s).to.include(\"Питер\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWIthDigits_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error word'] = (jsonData[0][0].word === \"цифр123ами\") && (jsonData[0][0].word === \"цифр123ами\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtml_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"tests['Error words'] = (jsonData[0][0].word === \"DOCTYPE\") && (jsonData[0][1].word === \"lang\") && (jsonData[0][2].word === \"ru\") && (jsonData[0][3].word === \"meta\")",
															"&& (jsonData[1][0].word === \"DOCTYPE\") && (jsonData[1][1].word === \"lang\") && (jsonData[1][2].word === \"ru\") && (jsonData[1][3].word === \"meta\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextSeveralRows_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextSeveralRows}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextSeveralRows}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsTextSeveralRows_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[0][1].code === errorCode) && (jsonData[0][2].code === errorCode)",
															"&& (jsonData[1][0].code === errorCode) && (jsonData[1][1].code === errorCode) && (jsonData[1][2].code === errorCode);",
															"tests['Error line numbers'] = (jsonData[0][0].row === 0) && (jsonData[0][1].row === 1) && (jsonData[0][2].row === 2)",
															"&& (jsonData[1][0].row === 0) && (jsonData[1][1].row === 1) && (jsonData[1][2].row === 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testErrorTextSeveralRows}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testErrorTextSeveralRows}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OneErrorText_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1133ecea-1286-482e-9c4d-be26fa91f7b3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ac5cf5c-a877-4ba7-9982-27e6d13c532d",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error position'] = (jsonData[0][0].pos === 15) && (jsonData[1][0].pos === 15);",
															"tests['Error line number'] = (jsonData[0][0].row === 0) && (jsonData[1][0].row === 0);",
															"tests['Error column number'] = (jsonData[0][0].col === 15) && (jsonData[1][0].col === 15);",
															"tests['Error word length'] = (jsonData[0][0].len === 6) && (jsonData[1][0].len === 6);",
															"tests['Error word'] = (jsonData[0][0].word === \"мяхких\") && (jsonData[1][0].word === \"мяхких\");",
															"tests['Speller result'] = pm.expect(jsonData[0][0].s).to.include(\"мягких\") && pm.expect(jsonData[1][0].s).to.include(\"мягких\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithOneError}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithOneError}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsText_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b418a32-1e47-44a2-9278-5d85f20ec90f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b71d3fd3-9b69-4faf-a994-77da824b08e4",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error position'] = (jsonData[0][0].pos === 3) && (jsonData[1][0].pos === 3);",
															"tests['Error line number'] = (jsonData[0][0].row === 0) && (jsonData[1][0].row === 0);",
															"tests['Error column number'] = (jsonData[0][0].col === 3) && (jsonData[1][0].col === 3);",
															"tests['Error word length'] = (jsonData[0][0].len === 5) && (jsonData[1][0].len === 5);",
															"tests['Error word'] = (jsonData[0][0].word === \"выпий\") && (jsonData[1][0].word === \"выпий\");",
															"tests['Speller result'] = pm.expect(jsonData[0][0].s).to.include(\"выпей\") && pm.expect(jsonData[1][0].s).to.include(\"выпей\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithFewErrors}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithFewErrors}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithUrl&Email_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[0][1].code === errorCode) && (jsonData[0][2].code === errorCode) ",
															"&& (jsonData[1][0].code === errorCode) && (jsonData[1][1].code === errorCode) && (jsonData[1][2].code === errorCode);",
															"",
															"tests['Error words'] = (jsonData[0][0].word === \"ww\") && (jsonData[0][1].word === \"yandx\") && (jsonData[0][2].word === \"ru\")",
															"&& (jsonData[1][0].word === \"emil\") && (jsonData[1][1].word === \"yndex\") && (jsonData[1][2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62157841-cba7-4fff-91c5-c87c5eeada5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d527338-3aaf-4781-a52a-85073b411a84",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "WithOptionalParams",
									"item": [
										{
											"name": "CorrectHtmlFormatHtml_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatHTML}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtmlFormatPlain_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"tests['Error words'] = (jsonData[0][0].word === \"DOCTYPE\") && (jsonData[0][1].word === \"lang\") && (jsonData[0][2].word === \"ru\") && (jsonData[0][3].word === \"meta\")",
															"&& (jsonData[1][0].word === \"DOCTYPE\") && (jsonData[1][1].word === \"lang\") && (jsonData[1][2].word === \"ru\") && (jsonData[1][3].word === \"meta\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}",
															"type": "text"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatPlain}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextFormatPlain_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart2}}",
															"type": "text"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatPlain}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_CAPITALIZATION}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreDigits_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_DIGITS}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreUrls_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_URLS}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0][0].code === errorCode) && (jsonData[1][0].code === errorCode);",
															"tests['Error word'] = (jsonData[0][0].word === \"повтора\") && (jsonData[1][0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0][0].s).to.eql([]) && pm.expect(jsonData[1][0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_FIND_REPEAT_WORDS}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords&IgnoreUrls_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[1][0].code === errorCode);",
															"tests['Error word'] = (jsonData[1][0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[1][0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits&FindRepeatWords&IgnoreUrls_JCTsP",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"5\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\")) + parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[2][0].code === errorCode);",
															"tests['Error word'] = (jsonData[2][0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[2][0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}",
															"type": "text"
														},
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}",
															"type": "text"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckTexts}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b887cd6-a64a-4c2d-b70b-a39ad5393185",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50bc24ae-0372-4bca-83e6-977997ec7625",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f986c0cd-0c4a-4360-8e7f-a8a63ae61eb5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c7e64d1e-e86b-4e05-aa5c-7a28e7ea5575",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f044365-964f-47ae-b697-856d92af1f68",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"jsonDataLength\", \"2\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b63c9bb0-6585-4b7b-b6a7-abf61cc49bcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bad824b9-5783-420b-a069-07233120c38c",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"contentTypeHeader\", \"application/json; charset=utf-8\");",
							"pm.environment.set(\"responseData\", \"json\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b6b8d4fc-028d-4987-aee6-5d39943cf1aa",
						"type": "text/javascript",
						"exec": [
							"var count = parseInt(pm.environment.get(\"jsonDataLength\"));",
							"pm.test(\"Response json length is \" + count, function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(count);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "XML",
			"item": [
				{
					"name": "checkText",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [
										{
											"name": "CorrectText_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testTextPart1}} {{testTextPart2}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}} {{testTextPart2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "RepeatText_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testRepeatText}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CapitalizationError_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"rootElement\", \"<SpellResult>\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = pm.variables.get(\"ERROR_CAPITALIZATION\");",
															"var jsonObject = xml2Json(responseBody);",
															"",
															"tests['Errors code is ' + errorCode] = (jsonObject['SpellResult'].error.$.code === errorCode);",
															"tests['Error word'] = (jsonObject['SpellResult'].error.word === \"питер\");",
															"tests['Speller result'] = pm.expect(jsonObject['SpellResult'].error.s).to.include(\"Питер\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWIthDigits_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"rootElement\", \"<SpellResult>\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = pm.variables.get(\"ERROR_UNKNOWN_WORD\");",
															"var jsonObject = xml2Json(responseBody);",
															"",
															"tests['Errors code is ' + errorCode] = (jsonObject['SpellResult'].error.$.code === errorCode);",
															"tests['Error word'] = (jsonObject['SpellResult'].error.word === \"цифр123ами\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testTextDigits}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtml_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"rootElement\", \"<SpellResult>\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var jsonObject = xml2Json(responseBody);",
															"",
															"tests['Error word'] = (jsonObject['SpellResult'].error[0].word === \"DOCTYPE\") && (jsonObject['SpellResult'].error[1].word === \"lang\")",
															"&& (jsonObject['SpellResult'].error[2].word === \"ru\") && (jsonObject['SpellResult'].error[3].word === \"meta\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testHtml}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextSeveralRows_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testTextSeveralRows}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextSeveralRows}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsTextSeveralRows_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"rootElement\", \"<SpellResult>\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = pm.variables.get(\"ERROR_UNKNOWN_WORD\");",
															"var jsonObject = xml2Json(responseBody);",
															"",
															"tests['Errors code is ' + errorCode] = (jsonObject['SpellResult'].error[0].$.code === errorCode) && (jsonObject['SpellResult'].error[1].$.code === errorCode)",
															"&& (jsonObject['SpellResult'].error[2].$.code === errorCode);",
															"tests['Error line numbers'] = (jsonObject['SpellResult'].error[0].$.row === \"0\") && (jsonObject['SpellResult'].error[1].$.row === \"1\")",
															"&& (jsonObject['SpellResult'].error[2].$.row === \"2\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testErrorTextSeveralRows}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testErrorTextSeveralRows}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OneErrorText_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1133ecea-1286-482e-9c4d-be26fa91f7b3",
														"exec": [
															"pm.environment.set(\"rootElement\", \"<SpellResult>\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ac5cf5c-a877-4ba7-9982-27e6d13c532d",
														"exec": [
															"var errorCode = pm.variables.get(\"ERROR_UNKNOWN_WORD\");",
															"var jsonObject = xml2Json(responseBody);",
															"",
															"tests['Error code is ' + errorCode] = (jsonObject['SpellResult'].error.$.code === errorCode);",
															"tests['Error position'] = (jsonObject['SpellResult'].error.$.pos === \"15\");",
															"tests['Error line number'] = (jsonObject['SpellResult'].error.$.row === \"0\");",
															"tests['Error column number'] = (jsonObject['SpellResult'].error.$.col === \"15\");",
															"tests['Error word length'] = (jsonObject['SpellResult'].error.$.len === \"6\");",
															"tests['Error word'] = (jsonObject['SpellResult'].error.word === \"мяхких\");",
															"tests['Speller result'] = pm.expect(jsonObject['SpellResult'].error.s).to.include(\"мягких\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testTextWithOneError}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithOneError}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsText_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b418a32-1e47-44a2-9278-5d85f20ec90f",
														"exec": [
															"pm.environment.set(\"rootElement\", \"<SpellResult>\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b71d3fd3-9b69-4faf-a994-77da824b08e4",
														"exec": [
															"var errorCode = pm.variables.get(\"ERROR_UNKNOWN_WORD\");",
															"var jsonObject = xml2Json(responseBody);",
															"",
															"tests['Error count is 2'] = (jsonObject['SpellResult'].error.length === 2);",
															"tests['Error code is ' + errorCode] = (jsonObject['SpellResult'].error[0].$.code === errorCode);",
															"tests['Error word'] = (jsonObject['SpellResult'].error[0].word === \"выпий\");",
															"tests['Speller result'] = pm.expect(jsonObject['SpellResult'].error[0].s).to.include(\"выпей\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testTextWithFewErrors}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithFewErrors}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithUrl_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"rootElement\", \"<SpellResult>\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = pm.variables.get(\"ERROR_UNKNOWN_WORD\");",
															"var jsonObject = xml2Json(responseBody);",
															"",
															"tests['Error code is ' + errorCode] = (jsonObject['SpellResult'].error[0].$.code === errorCode) && (jsonObject['SpellResult'].error[1].$.code === errorCode)",
															"&& (jsonObject['SpellResult'].error[2].$.code === errorCode);",
															"tests['Error word'] = (jsonObject['SpellResult'].error[0].word === \"ww\") && (jsonObject['SpellResult'].error[1].word === \"yandx\")",
															"&& (jsonObject['SpellResult'].error[2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testTextUrl}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithEmail_XCTG",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"rootElement\", \"<SpellResult>\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = pm.variables.get(\"ERROR_UNKNOWN_WORD\");",
															"var jsonObject = xml2Json(responseBody);",
															"",
															"tests['Error code is ' + errorCode] = (jsonObject['SpellResult'].error[0].$.code === errorCode) && (jsonObject['SpellResult'].error[1].$.code === errorCode)",
															"&& (jsonObject['SpellResult'].error[2].$.code === errorCode);",
															"tests['Error word'] = (jsonObject['SpellResult'].error[0].word === \"emil\") && (jsonObject['SpellResult'].error[1].word === \"yndex\")",
															"&& (jsonObject['SpellResult'].error[2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerXml}}/{{methodCheckText}}?{{paramText}}={{testTextEmail}}",
													"host": [
														"{{yandexSpellerXml}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62157841-cba7-4fff-91c5-c87c5eeada5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d527338-3aaf-4781-a52a-85073b411a84",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f044365-964f-47ae-b697-856d92af1f68",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"rootElement\", \"<SpellResult/>\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b63c9bb0-6585-4b7b-b6a7-abf61cc49bcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bad824b9-5783-420b-a069-07233120c38c",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"contentTypeHeader\", \"text/xml; charset=utf-8\");",
							"pm.environment.set(\"responseData\", \"xml\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b6b8d4fc-028d-4987-aee6-5d39943cf1aa",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"rootElement\"));",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "ErrorMethodName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11dfb53b-667f-4d66-8d36-e5b7b311086c",
								"exec": [
									"pm.environment.set(\"requestResult\", \"404\");",
									"pm.environment.set(\"responseErrorMethod\", \"Yandex.Speller API documentation can be found here: https://tech.yandex.ru/speller/\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0499ffe9-3d9d-4669-b690-92db9bbfc10c",
								"exec": [
									"pm.test(\"Body contains string 'Method not allowed'\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"responseErrorMethod\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{yandexSpellerJson}}/{{methodErrorName}}",
							"host": [
								"{{yandexSpellerJson}}"
							],
							"path": [
								"{{methodErrorName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckTextWithoutParams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11dfb53b-667f-4d66-8d36-e5b7b311086c",
								"exec": [
									"pm.environment.set(\"jsonDataLength\", \"0\");",
									"pm.environment.set(\"contentTypeHeader\", \"application/json; charset=utf-8\");",
									"pm.environment.set(\"responseData\", \"json\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0499ffe9-3d9d-4669-b690-92db9bbfc10c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
							"host": [
								"{{yandexSpellerJson}}"
							],
							"path": [
								"{{methodCheckText}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckTextsWithoutParams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11dfb53b-667f-4d66-8d36-e5b7b311086c",
								"exec": [
									"pm.environment.set(\"jsonDataLength\", \"0\");",
									"pm.environment.set(\"contentTypeHeader\", \"application/json; charset=utf-8\");",
									"pm.environment.set(\"responseData\", \"json\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0499ffe9-3d9d-4669-b690-92db9bbfc10c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{yandexSpellerJson}}/{{methodCheckTexts}}",
							"host": [
								"{{yandexSpellerJson}}"
							],
							"path": [
								"{{methodCheckTexts}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUTrequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
								"exec": [
									"pm.environment.set(\"requestResult\", \"405\");",
									"pm.environment.set(\"responseErrorMethod\", \"Method not allowed\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
								"exec": [
									"pm.test(\"Body contains string 'Method not allowed'\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"responseErrorMethod\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"text\" : \"{{testTextPart1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
							"host": [
								"{{yandexSpellerJson}}"
							],
							"path": [
								"{{methodCheckText}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETErequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
								"exec": [
									"pm.environment.set(\"requestResult\", \"405\");",
									"pm.environment.set(\"responseErrorMethod\", \"Method not allowed\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
								"exec": [
									"pm.test(\"Body contains string 'Method not allowed'\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"responseErrorMethod\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"text\" : \"{{testTextPart1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{yandexSpellerJson}}/{{methodCheckText}}",
							"host": [
								"{{yandexSpellerJson}}"
							],
							"path": [
								"{{methodCheckText}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e4f90f12-db34-4152-be75-637e470bf46a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "afe95b41-7995-43b2-9cbd-df11f09080ea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ccfb0d2d-4ad9-4171-840a-54f06465ab2b",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set(\"requestResult\", \"200\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "05dc93bc-8cf6-4164-bd76-ed82b83fa4c8",
				"type": "text/javascript",
				"exec": [
					"var requestResult = parseInt(pm.environment.get(\"requestResult\"));",
					"pm.test(\"Status code is \" + requestResult, function () {",
					"    pm.response.to.have.status(requestResult);",
					"});",
					"",
					"if (requestResult === 200) {",
					"    var contentTypeHeader = pm.environment.get(\"contentTypeHeader\");",
					"    pm.test(\"Header. Content-Type is \" + contentTypeHeader, function () {",
					"       pm.response.to.be.header(\"Content-Type\", contentTypeHeader);",
					"    });",
					"",
					"",
					"    var responseData = (pm.environment.get(\"responseData\"));",
					"    pm.test(\"Response is \" + responseData, function () {",
					"        if (responseData === 'json') {",
					"            pm.response.to.be.json;",
					"       } if (responseData === 'xml') {",
					"           pm.expect(xml2Json(responseBody)).to.exist;",
					"    }});",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"id": "ed83941c-8c29-48a4-bd8b-47bef0f59538",
			"key": "yandexSpellerJson",
			"value": "http://speller.yandex.net/services/spellservice.json",
			"type": "string"
		},
		{
			"id": "24111cbf-72c6-437d-a1ea-f8450497ccce",
			"key": "yandexSpellerXml",
			"value": "http://speller.yandex.net/services/spellservice",
			"type": "string"
		},
		{
			"id": "c9328af5-367f-4d1e-b555-cb9e528377ae",
			"key": "methodCheckText",
			"value": "checkText",
			"type": "string"
		},
		{
			"id": "9223c00b-3654-4a3b-af0f-91b27bd1f914",
			"key": "methodCheckTexts",
			"value": "checkTexts",
			"type": "string"
		},
		{
			"id": "20c07b8f-4b6d-47c6-9b50-3749d9a454a8",
			"key": "methodErrorName",
			"value": "chekText",
			"type": "string"
		},
		{
			"id": "c099c388-1a20-43d1-91e5-8e94c129cbd3",
			"key": "paramText",
			"value": "text",
			"type": "string"
		},
		{
			"id": "839c885f-fe1b-4093-869a-094a03ea138d",
			"key": "paramLang",
			"value": "lang",
			"type": "string"
		},
		{
			"id": "c81e6d44-fcae-4349-99e2-125193dc6775",
			"key": "paramOptions",
			"value": "options",
			"type": "string"
		},
		{
			"id": "f282e70d-8b0b-4dc8-a124-4cdfb0a04d67",
			"key": "paramFormat",
			"value": "format",
			"type": "string"
		},
		{
			"id": "1ee73706-5611-47aa-b75a-c184e1dd57d1",
			"key": "option_IGNORE_DIGITS",
			"value": "2",
			"type": "string"
		},
		{
			"id": "76860562-f383-44fd-bc8f-1d42459360b4",
			"key": "option_IGNORE_URLS",
			"value": "4",
			"type": "string"
		},
		{
			"id": "f8d99bd6-15c0-408e-bbc2-b8f7e72b7513",
			"key": "option_FIND_REPEAT_WORDS",
			"value": "8",
			"type": "string"
		},
		{
			"id": "fea70620-6e19-4f86-8017-7bef4a0ef886",
			"key": "option_IGNORE_CAPITALIZATION",
			"value": "512",
			"type": "string"
		},
		{
			"id": "a76b251e-a374-4398-bb29-53ba245d21b4",
			"key": "ERROR_UNKNOWN_WORD",
			"value": "1",
			"type": "string"
		},
		{
			"id": "7a07adc5-78d9-422a-931f-8232c8cb7d98",
			"key": "ERROR_REPEAT_WORD",
			"value": "2",
			"type": "string"
		},
		{
			"id": "31c5150b-da9f-4d6e-b541-7306d8c88ddc",
			"key": "ERROR_CAPITALIZATION",
			"value": "3",
			"type": "string"
		},
		{
			"id": "c61f8d3f-02e7-4477-bbc7-5871c6d97bf6",
			"key": "ERROR_TOO_MANY_ERRORS",
			"value": "4",
			"type": "string"
		},
		{
			"id": "e43fc310-ccfc-426b-9410-350effba6a7d",
			"key": "formatPlain",
			"value": "plain",
			"type": "string"
		},
		{
			"id": "8a943909-473d-4fdb-885b-77b4fe0a241c",
			"key": "formatHTML",
			"value": "html",
			"type": "string"
		},
		{
			"id": "d8588ac9-d331-45d7-9233-dbad04453cbb",
			"key": "langRU",
			"value": "ru",
			"type": "string"
		},
		{
			"id": "174a600a-5194-4c8b-955e-ac4b9fb1d4f2",
			"key": "langUK",
			"value": "uk",
			"type": "string"
		},
		{
			"id": "a1adbb7c-b3c8-4b80-88a9-89e0d3538bdf",
			"key": "langEN",
			"value": "en",
			"type": "string"
		},
		{
			"id": "eaf6f078-fc2e-4f23-92d4-281827a0b674",
			"key": "elementArrayOfSpellResult",
			"value": "ArrayOfSpellResult",
			"type": "string"
		},
		{
			"id": "94610d3c-e97a-46f8-adc2-dbbdc693032c",
			"key": "elementSpellResult",
			"value": "SpellResult",
			"type": "string"
		},
		{
			"id": "ea521c1e-1503-4c7c-b171-d33d7c18c9c6",
			"key": "elementError",
			"value": "error",
			"type": "string"
		},
		{
			"id": "5e707a1d-0cdc-4d0d-9e5b-ef697f58a6f0",
			"key": "elementWord",
			"value": "word",
			"type": "string"
		},
		{
			"id": "02024f6a-6728-4a5c-b76a-8a3a5f76305f",
			"key": "elementS",
			"value": "s",
			"type": "string"
		},
		{
			"id": "acb83a44-743c-4779-a182-69443f6ffe42",
			"key": "errorCode",
			"value": "code",
			"type": "string"
		},
		{
			"id": "b77eb5be-8749-4524-a146-0cf9cd58dfa5",
			"key": "errorPos",
			"value": "pos",
			"type": "string"
		},
		{
			"id": "585b4ff6-57b0-4329-bb87-df95c11e983b",
			"key": "errorRow",
			"value": "row",
			"type": "string"
		},
		{
			"id": "c2db04a8-b882-4c56-9e02-2c7659c047cb",
			"key": "errorCol",
			"value": "col",
			"type": "string"
		},
		{
			"id": "a8ec361e-59eb-49ef-9e17-56b663fd0175",
			"key": "errorLen",
			"value": "len",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}