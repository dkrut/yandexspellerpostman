{
	"info": {
		"_postman_id": "e1f64a8c-5978-4997-a96a-28c25780a4ca",
		"name": "YandexSpeller",
		"description": "https://yandex.ru/dev/speller/\r\n\r\nСервис проверки правописания Яндекс.Спеллер (коротко Спеллер) предлагает разработчикам использовать возможность интерактивной проверки орфографии на страницах своих сайтов.\r\n\r\nСпеллер анализирует слова, основываясь на правилах орфографии и лексике современного языка, а также использует технологии машинного обучения.\r\n\r\nСервис в настоящее время поддерживает три языка:\r\n- русский;\r\n- украинский;\r\n- английский.\r\n\r\nЯндекс.Спеллер является HTTP-службой и предоставляет API для обработки клиентских запросов на проверку орфографии. Яндекс.Спеллер поддерживает HTTP(S) GET- и POST-запросы и работает в кодировке UTF-8.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "JSON",
			"item": [
				{
					"name": "checkText",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [
										{
											"name": "CorrectText",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextPart1}} {{testTextPart2}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextPart1}} {{testTextPart2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "RepeatText",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testRepeatText}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CapitalizationError",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_CAPITALIZATION\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"питер\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"Питер\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWIthDigits",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"цифр123ами\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextDigits}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtml",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"4\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"tests['Error words'] = (jsonData[0].word === \"DOCTYPE\") && (jsonData[1].word === \"lang\") && (jsonData[2].word === \"ru\") && (jsonData[3].word === \"meta\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testHtml}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectTextSeveralRows",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextSeveralRows}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextSeveralRows}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsTextSeveralRows",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"var jsonData = pm.response.json();",
															"",
															"tests['Errors code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error line numbers'] = (jsonData[0].row === 0) && (jsonData[1].row === 1) && (jsonData[2].row === 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testErrorTextSeveralRows}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testErrorTextSeveralRows}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OneErrorText",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1133ecea-1286-482e-9c4d-be26fa91f7b3",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ac5cf5c-a877-4ba7-9982-27e6d13c532d",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error position'] = (jsonData[0].pos === 15);",
															"tests['Error line number'] = (jsonData[0].row === 0);",
															"tests['Error column number'] = (jsonData[0].col === 15);",
															"tests['Error word length'] = (jsonData[0].len === 6);",
															"tests['Error word'] = (jsonData[0].word === \"мяхких\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"мягких\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextWithOneError}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithOneError}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "FewErrorsText",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b418a32-1e47-44a2-9278-5d85f20ec90f",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"2\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b71d3fd3-9b69-4faf-a994-77da824b08e4",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error position'] = (jsonData[0].pos === 3);",
															"tests['Error line number'] = (jsonData[0].row === 0);",
															"tests['Error column number'] = (jsonData[0].col === 3);",
															"tests['Error word length'] = (jsonData[0].len === 5);",
															"tests['Error word'] = (jsonData[0].word === \"выпий\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.include(\"выпей\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextWithFewErrors}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextWithFewErrors}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithUrl",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"ww\");",
															"tests['Error word'] = (jsonData[1].word === \"yandx\");",
															"tests['Error word'] = (jsonData[2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextUrl}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "TextWithEmail",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"3\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_UNKNOWN_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode) && (jsonData[1].code === errorCode) && (jsonData[2].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"emil\");",
															"tests['Error word'] = (jsonData[1].word === \"yandx\");",
															"tests['Error word'] = (jsonData[2].word === \"ru\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextEmail}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextEmail}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62157841-cba7-4fff-91c5-c87c5eeada5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d527338-3aaf-4781-a52a-85073b411a84",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "WithOptionalParams",
									"item": [
										{
											"name": "CorrectHtmlFormatHtml",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testHtml}}&{{paramFormat}}={{formatHTML}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatHTML}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "CorrectHtmlFormatHtml Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testHtml}}&{{paramFormat}}={{formatHTML}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testHtml}}"
														},
														{
															"key": "{{paramFormat}}",
															"value": "{{formatHTML}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}&{{paramOptions}}={{option_IGNORE_CAPITALIZATION}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_CAPITALIZATION}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreDigits",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextDigits}}&{{paramOptions}}={{option_IGNORE_DIGITS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextDigits}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_DIGITS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreUrls",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextUrl}}+{{testTextEmail}}&{{paramOptions}}={{option_IGNORE_URLS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextUrl}}+{{testTextEmail}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_IGNORE_URLS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testRepeatText}}&{{paramOptions}}={{option_FIND_REPEAT_WORDS}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{option_FIND_REPEAT_WORDS}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"0\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}+{{testTextDigits}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}+{{testTextDigits}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionFindRepeatWords&IgnoreUrls",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "OptionIgnoreCapitalization&IgnoreDigits&FindRepeatWords&IgnoreUrls Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cf4cb8b-c442-4ef9-abab-6a32ae19a2dc",
														"exec": [
															"pm.environment.set(\"jsonDataLength\", \"1\");",
															"",
															"var collectionOption = parseInt(pm.variables.get(\"option_IGNORE_CAPITALIZATION\")) + parseInt(pm.variables.get(\"option_IGNORE_DIGITS\")) + parseInt(pm.variables.get(\"option_IGNORE_URLS\")) + parseInt(pm.variables.get(\"option_FIND_REPEAT_WORDS\"));",
															"pm.environment.set(\"collectionOption\", collectionOption);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "974c372d-91e0-4027-91ed-6e9d0ba85fdd",
														"exec": [
															"var errorCode = parseInt(pm.variables.get(\"ERROR_REPEAT_WORD\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"tests['Error code is ' + errorCode] = (jsonData[0].code === errorCode);",
															"tests['Error word'] = (jsonData[0].word === \"повтора\");",
															"tests['Speller result'] = pm.expect(jsonData[0].s).to.eql([]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{yandexSpellerJson}}/{{methodCheckText}}?{{paramText}}={{testTextCapitalization}}+{{testTextDigits}}+{{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}&{{paramOptions}}={{collectionOption}}",
													"host": [
														"{{yandexSpellerJson}}"
													],
													"path": [
														"{{methodCheckText}}"
													],
													"query": [
														{
															"key": "{{paramText}}",
															"value": "{{testTextCapitalization}}+{{testTextDigits}}+{{testRepeatText}}+{{testTextEmail}}+и+{{testTextUrl}}"
														},
														{
															"key": "{{paramOptions}}",
															"value": "{{collectionOption}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b887cd6-a64a-4c2d-b70b-a39ad5393185",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50bc24ae-0372-4bca-83e6-977997ec7625",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e7a745e-0a7b-4424-8854-38cb77f94655",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c57417fe-573b-41ae-8e38-c042eed34ddf",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "WithOptionalParams",
									"item": [],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Unsupported methods",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f044365-964f-47ae-b697-856d92af1f68",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b63c9bb0-6585-4b7b-b6a7-abf61cc49bcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "checkTexts",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62157841-cba7-4fff-91c5-c87c5eeada5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d527338-3aaf-4781-a52a-85073b411a84",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "WithOptionalParams",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b887cd6-a64a-4c2d-b70b-a39ad5393185",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50bc24ae-0372-4bca-83e6-977997ec7625",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "WithoutOptionalParams",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e7a745e-0a7b-4424-8854-38cb77f94655",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c57417fe-573b-41ae-8e38-c042eed34ddf",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "WithOptionalParams",
									"item": [],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Unsupported methods",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f044365-964f-47ae-b697-856d92af1f68",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b63c9bb0-6585-4b7b-b6a7-abf61cc49bcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bad824b9-5783-420b-a069-07233120c38c",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"contentTypeHeader\", \"application/json; charset=utf-8\");",
							"pm.environment.set(\"responseData\", \"json\");",
							"pm.environment.set(\"requestResult\", \"200\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b6b8d4fc-028d-4987-aee6-5d39943cf1aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ccfb0d2d-4ad9-4171-840a-54f06465ab2b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "05dc93bc-8cf6-4164-bd76-ed82b83fa4c8",
				"type": "text/javascript",
				"exec": [
					"var requestResult = parseInt(pm.environment.get(\"requestResult\"));",
					"pm.test(\"Status code is \" + requestResult, function () {",
					"    pm.response.to.have.status(requestResult);",
					"});",
					"",
					"",
					"var contentTypeHeader = pm.environment.get(\"contentTypeHeader\");",
					"pm.test(\"Header. Content-Type is \" + contentTypeHeader, function () {",
					"    pm.response.to.be.header(\"Content-Type\", contentTypeHeader);",
					"});",
					"",
					"",
					"var responseData = (pm.environment.get(\"responseData\"));",
					"pm.test(\"Response is \" + responseData, function () {",
					"    if (responseData === 'json') {",
					"        pm.response.to.be.json;",
					"    } if (responseData === 'xml') {",
					"        pm.expect(xml2Json(responseBody)).to.exist;",
					"}});",
					"",
					"",
					"var count = parseInt(pm.environment.get(\"jsonDataLength\"));",
					"pm.test(\"Response json length is \" + count, function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.length).to.eql(count);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "52dd9370-5c99-4af2-9c11-fe12d3b6b540",
			"key": "yandexSpellerJson",
			"value": "http://speller.yandex.net/services/spellservice.json",
			"type": "string"
		},
		{
			"id": "ada9c2e3-b0e7-4d91-9a2b-9a532d272837",
			"key": "methodCheckText",
			"value": "checkText",
			"type": "string"
		},
		{
			"id": "1f9510a4-951a-4269-a9da-e709ef03e7b6",
			"key": "methodCheckTexts",
			"value": "checkTexts",
			"type": "string"
		},
		{
			"id": "4890af70-80f1-450e-95bb-aa7d06dcd69d",
			"key": "methodErrorName",
			"value": "chekText",
			"type": "string"
		},
		{
			"id": "88193afc-237c-4892-81e7-21895a31451a",
			"key": "paramText",
			"value": "text",
			"type": "string"
		},
		{
			"id": "492fe518-66ad-4e6a-b882-318ac3396f77",
			"key": "paramLang",
			"value": "lang",
			"type": "string"
		},
		{
			"id": "7de93111-67e3-4010-a4dc-3f6af38a7d0d",
			"key": "paramOptions",
			"value": "options",
			"type": "string"
		},
		{
			"id": "346358c2-8cef-4586-97a5-46f1ea9817c1",
			"key": "paramFormat",
			"value": "format",
			"type": "string"
		},
		{
			"id": "c2d54624-e969-47e2-9cc9-4bb5749ffe11",
			"key": "option_IGNORE_DIGITS",
			"value": "2",
			"type": "string"
		},
		{
			"id": "7b3af9d3-e3c3-484f-940f-54f8ea17e256",
			"key": "option_IGNORE_URLS",
			"value": "4",
			"type": "string"
		},
		{
			"id": "97e08d82-226a-403e-a41d-a3d75af61cc7",
			"key": "option_FIND_REPEAT_WORDS",
			"value": "8",
			"type": "string"
		},
		{
			"id": "b272f63c-d900-4459-94d5-a04749003ce0",
			"key": "option_IGNORE_CAPITALIZATION",
			"value": "512",
			"type": "string"
		},
		{
			"id": "31c2664b-f3ab-4e88-816f-8d51adcddf0e",
			"key": "ERROR_UNKNOWN_WORD",
			"value": "1",
			"type": "string"
		},
		{
			"id": "4097659b-dd72-46e3-92ba-fc7d98779469",
			"key": "ERROR_REPEAT_WORD",
			"value": "2",
			"type": "string"
		},
		{
			"id": "594787a3-8820-43b3-804c-ccab5b91ea6e",
			"key": "ERROR_CAPITALIZATION",
			"value": "3",
			"type": "string"
		},
		{
			"id": "c655002f-8cc0-46e4-9fb9-b48e1e1e6f55",
			"key": "ERROR_TOO_MANY_ERRORS",
			"value": "4",
			"type": "string"
		},
		{
			"id": "4044231a-ccd5-47d5-a4ef-69a1785ec77d",
			"key": "formatPlain",
			"value": "plain",
			"type": "string"
		},
		{
			"id": "87c6f346-bd59-4dd3-8eff-a24feb64153f",
			"key": "formatHTML",
			"value": "html",
			"type": "string"
		},
		{
			"id": "dc20e60f-bd24-47ec-92a2-35c9ad8f23f0",
			"key": "langRU",
			"value": "ru",
			"type": "string"
		},
		{
			"id": "67647748-8e3d-4911-b629-8e314956f551",
			"key": "langUK",
			"value": "uk",
			"type": "string"
		},
		{
			"id": "6b5b0084-fe3b-4666-8c55-103871bea47d",
			"key": "langEN",
			"value": "en",
			"type": "string"
		},
		{
			"id": "ed593a54-cbd1-468f-8bca-db7b90d20052",
			"key": "elementArrayOfSpellResult",
			"value": "ArrayOfSpellResult",
			"type": "string"
		},
		{
			"id": "6b816434-cf1e-4066-9ee7-49df2c592bb6",
			"key": "elementSpellResult",
			"value": "SpellResult",
			"type": "string"
		},
		{
			"id": "bb2e816c-14b2-4bc2-b623-e443346a8562",
			"key": "elementError",
			"value": "error",
			"type": "string"
		},
		{
			"id": "e38c30c2-5b3c-4f24-9fa0-a809caacdb52",
			"key": "elementWord",
			"value": "word",
			"type": "string"
		},
		{
			"id": "760f42a9-3f87-4253-9575-651388cf7bf4",
			"key": "elementS",
			"value": "s",
			"type": "string"
		},
		{
			"id": "2333e68e-09c3-4542-8ec0-1bf347b99497",
			"key": "errorCode",
			"value": "code",
			"type": "string"
		},
		{
			"id": "6c0baa7e-ed13-4817-8cef-0fa7f6f9abcc",
			"key": "errorPos",
			"value": "pos",
			"type": "string"
		},
		{
			"id": "383ea69e-7528-481e-b6c9-b053b6e50f9b",
			"key": "errorRow",
			"value": "row",
			"type": "string"
		},
		{
			"id": "bb3a9319-0e46-45e4-a9c1-c561546916b1",
			"key": "errorCol",
			"value": "col",
			"type": "string"
		},
		{
			"id": "0dc91c19-cf2b-4ac2-9f69-8a41724f1282",
			"key": "errorLen",
			"value": "len",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}